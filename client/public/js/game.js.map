{"version":3,"sources":["js/_app.js","js/board.js","js/game.js","js/matchmaking.js","js/server.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"game.js","sourcesContent":["angular\r\n\t.module(\"Game\", [\r\n\t\t'ngRoute'\r\n\t])\r\n\t.config(function ($routeProvider) {\r\n\t\t$routeProvider\r\n\t\t\t.when('/board', {\r\n\t\t\t\tcontroller: 'BoardCtrl',\r\n\t\t\t\ttemplateUrl: 'game.html'\r\n\t\t\t})\r\n\t\t\t.when('/matchmaking', {\r\n\t\t\t\tcontroller: 'MatchmakingCtrl',\r\n\t\t\t\ttemplateUrl: 'matchmaking.html'\r\n\t\t\t})\r\n\t\t\t.otherwise({\r\n\t\t\t\tredirectTo: '/matchmaking'\r\n\t\t\t})\r\n\t});","const BOARD = [\r\n\t[\r\n\t\t{class: 'cell rosette', isRosette: true, next: [1,0], direction: 'down'},\r\n\t\t{class: 'cell', next: [0,0], direction: 'left'},\r\n\t\t{class: 'cell', next: [0,1], direction: 'left'},\r\n\t\t{class: 'cell start', next: [0, 2], start: 'white', direction: 'left'},\r\n\t\t{class: 'empty'},\r\n\t\t{class: 'empty'},\r\n\t\t{class: 'cell rosette end', isRosette: true, end: 'white', exit: [-1,6], direction: 'up'},\r\n\t\t{class: 'cell', next: [0,6], direction: 'left'}\r\n\t],\r\n\t[\r\n\t\t{class: 'cell', next: [1,1], direction: 'right'},\r\n\t\t{class: 'cell', next: [1,2], direction: 'right'},\r\n\t\t{class: 'cell', next: [1,3], direction: 'right'},\r\n\t\t{class: 'cell rosette', isRosette: true, next: [1,4], direction: 'right'},\r\n\t\t{class: 'cell', next: [1,5], direction: 'right'},\r\n\t\t{class: 'cell', next: [1,6], direction: 'right'},\r\n\t\t{class: 'cell', next: [1,7], direction: 'right'},\r\n\t\t{class: 'cell', split: true, next: {white: [0,7], black: [2,7]}, direction: {white: 'up', black: 'down'}}\r\n\t],\r\n\t[\r\n\t\t{class: 'cell rosette', isRosette: true, next: [1,0], direction: 'up'},\r\n\t\t{class: 'cell', next: [2,0], direction: 'left'},\r\n\t\t{class: 'cell', next: [2,1], direction: 'left'},\r\n\t\t{class: 'cell start', next: [2, 2], start: 'black', direction: 'left'},\r\n\t\t{class: 'empty'},\r\n\t\t{class: 'empty'},\r\n\t\t{class: 'cell rosette end', isRosette: true, end: 'black', exit: [3,6], direction: 'down'},\r\n\t\t{class: 'cell', next: [2,6], direction: 'left'}\r\n\t]\r\n];","const CELL_SIZE = 80;\r\nconst PIECE_CELL_MARGIN = 20;\r\n\r\nangular.module(\"Game\")\r\n    .filter('range', RangeFilter)\r\n    .controller('BoardCtrl', BoardCtrl);\r\n\r\nfunction RangeFilter() {\r\n    return function(input, total) {\r\n        total = parseInt(total);\r\n\r\n        for (var i=0; i<total; i++) {\r\n            input.push(i);\r\n        }\r\n\r\n        return input;\r\n    };\r\n}\r\n\r\nfunction BoardCtrl($scope) {\r\n\r\n    // TODO: move game logic to server\r\n    // TODO: refactor local events to be sent to server\r\n    // TODO: handle server events to move things in board\r\n\r\n\tvar pieces = $scope.pieces = {\r\n        white: [],\r\n        black: []\r\n    };\r\n\r\n    var availablePieces = $scope.availablePieces = {\r\n        white: 6,\r\n        black: 6\r\n    };\r\n\r\n    var removedPieces = $scope.removedPieces = {\r\n        white: 0,\r\n        black: 0\r\n    };\r\n\r\n    var indexes = {\r\n        white: 0,\r\n        black: 0\r\n    };\r\n\r\n    var players = $scope.players = ['white', 'black'];\r\n\r\n    var starts = $scope.starts = {\r\n        white: null,\r\n        black: null\r\n    };\r\n\r\n    var dice = $scope.dice = {\r\n        white: 1,\r\n        black: 1\r\n    };\r\n\r\n    $scope.previewedPiece = null;\r\n    $scope.previewArrows = [];\r\n\r\n    $scope.turn = \"white\";\r\n\r\n    var board = $scope.board = createBoard();\r\n\r\n    starts.white = findStartCell($scope.board, 'white');\r\n    starts.black = findStartCell($scope.board, 'black');\r\n\r\n    console.log(\"Starting cells: \", starts);\r\n\r\n    $scope.startGame = function() {\r\n        $scope.endTurn();\r\n    };\r\n\r\n    $scope.hasPieceInCell = function(cell) {\r\n        if(!cell) return false;\r\n        return !!cell.piece;\r\n    };\r\n\r\n    $scope.getPiecePlayer = function(cell) {\r\n        if(!cell || !cell.piece) return null;\r\n        return cell.piece.player;\r\n    };\r\n\r\n    $scope.getPieceX = getPieceX;\r\n    $scope.getPieceY = getPieceY;\r\n\r\n    $scope.addPiece = function(player) {\r\n\r\n        if(player !== $scope.turn) {\r\n            console.warn(\"Not the player \", player, \" turn!\");\r\n            return;\r\n        }\r\n\r\n        if(dice[player] === 0) {\r\n            console.warn(\"Cannot place pieces, dice is zero!\");\r\n            return;\r\n        }\r\n\r\n        if(availablePieces[player] <= 0) {\r\n            console.warn(\"Player has no remaining available pieces: \", player);\r\n            return;\r\n        }\r\n\r\n        var start = starts[player];\r\n\r\n        console.log(\"Adding piece for player \", player, \", starting cell: \", start);\r\n\r\n        if($scope.hasPieceInCell(start)) {\r\n            console.warn(\"Can't add piece for [\", player, \"], piece already in starting cell!\");\r\n            return;\r\n        }\r\n\r\n        var piece = {\r\n            id: ++indexes[player],\r\n            cell: getCell(board, start.row, start.col),\r\n            player: player,\r\n            isAlive: true,\r\n            isOut: false\r\n        };\r\n\r\n        pieces[player].push(piece);\r\n        piece.cell.piece = piece;\r\n\r\n        availablePieces[player]--;\r\n\r\n        $scope.advancePiece(piece, dice[player] - 1);\r\n\r\n        if(piece.cell.isRosette) {\r\n            console.info(\"Landed on rosette! Got an extra turn\");\r\n            $scope.rollDice(player);\r\n            return;\r\n        }\r\n\r\n        $scope.endTurn();\r\n    };\r\n\r\n\r\n    $scope.selectPiece = function(piece) {\r\n\r\n        if(piece.player !== $scope.turn) {\r\n            console.warn(\"Not the player \", piece.player, \" turn!\");\r\n            return;\r\n        }\r\n\r\n        if(dice[piece.player] === 0) {\r\n            console.warn(\"Cannot move pieces, dice is zero!\");\r\n            return;\r\n        }\r\n\r\n        if(angular.equals(piece, $scope.previewedPiece)) {\r\n            $scope.advancePiece(piece, dice[piece.player]);\r\n\r\n            if(piece.cell.isRosette) {\r\n                console.info(\"Landed on a rosette! Extra move granted!\");\r\n                $scope.rollDice(piece.player);\r\n                return;\r\n            }\r\n\r\n            $scope.endTurn();\r\n\r\n            return;\r\n        }\r\n\r\n        $scope.previewMove(piece, dice[piece.player]);\r\n    };\r\n\r\n    $scope.endTurn = function() {\r\n        $scope.turn = ($scope.turn === 'white') ? 'black' : 'white';\r\n        console.info(\"Now it is \", $scope.turn, \" turn!\");\r\n        $scope.rollDice($scope.turn);\r\n    };\r\n\r\n    $scope.rollDice = function(player) {\r\n        dice[player] = Math.floor(Math.random() * 5);\r\n        console.log(\"Rolled dice for \", player, \": \", dice[player]);\r\n    };\r\n\r\n    $scope.previewMove = function(piece, numCells) {\r\n        var previews = [];\r\n        var next = piece.cell;\r\n\r\n        console.log(\"Preview move by piece: \", piece, numCells);\r\n\r\n        // Traverse the cell chain until the target piece\r\n        while(numCells-- > 0) {\r\n            var prev = next;\r\n            next = getNextCell(board, next, piece.player);\r\n\r\n            if(!next) { // No more pieces in chain, means numCells overflows the board end\r\n                console.warn(\"Can't advance piece, num cells overflow chain\", piece, numCells);\r\n                return;\r\n            }\r\n\r\n            // If the target piece (numCells == 0) is \"end\", means we leave the board with this piece and earn +1 score\r\n            if(next === 'end' && numCells === 0) {\r\n\r\n                previews.push({\r\n                    y: (prev.exit[0] * CELL_SIZE),\r\n                    x: (prev.exit[1] * CELL_SIZE),\r\n                    direction: prev.direction\r\n                });\r\n\r\n                console.info(\"Preview result [endgame]: \", previews);\r\n\r\n                $scope.previewedPiece = piece;\r\n                $scope.previewArrows = previews;\r\n\r\n                return;\r\n            }\r\n\r\n            var direction = prev.direction || 'right';\r\n            if(prev.split) direction = prev.direction[piece.player];\r\n\r\n            previews.push({y: next.row * CELL_SIZE, x: next.col * CELL_SIZE, direction: direction});\r\n        }\r\n\r\n        // If piece from same player, block move\r\n        if(next.piece && next.piece.player === piece.player) {\r\n            console.warn(\"Targeted cell already has piece: \", next.piece, next);\r\n            return;\r\n        }\r\n\r\n        if(next.piece && next.isRosette) {\r\n            console.warn(\"Targeted cell is safe cell, cannot move\");\r\n            return;\r\n        }\r\n\r\n        console.info(\"Preview result: \", previews);\r\n\r\n        $scope.previewedPiece = piece;\r\n        $scope.previewArrows = previews;\r\n    };\r\n\r\n    $scope.advancePiece = function(piece, numCells) {\r\n\r\n        var next = piece.cell;\r\n\r\n        console.log(\"Advancing piece: \", piece, numCells);\r\n\r\n        // Traverse the cell chain until the target piece\r\n        while(numCells-- > 0) {\r\n            next = getNextCell(board, next, piece.player);\r\n\r\n            if(!next) { // No more pieces in chain, means numCells overflows the board end\r\n                console.warn(\"Can't advance piece, num cells overflow chain\", piece, numCells);\r\n                return;\r\n            }\r\n\r\n            // If the target piece (numCells == 0) is \"end\", means we leave the board with this piece and earn +1 score\r\n            if(next === 'end' && numCells === 0) {\r\n                console.info(\"One piece out: \", piece);\r\n\r\n                piece.cell.piece = null;\r\n                piece.cell = null;\r\n                piece.isOut = true;\r\n\r\n                removedPieces[piece.player]++;\r\n\r\n                $scope.previewArrows = [];\r\n                $scope.previewedPiece = null;\r\n\r\n                return;\r\n\r\n            }\r\n        }\r\n\r\n        // If piece in targeted cell is of other player, \"eat\" the piece\r\n        if(next.piece && next.piece.player !== piece.player) {\r\n\r\n            if(next.isRosette) {\r\n                console.warn(\"Targeted cell is safe cell, cannot move\");\r\n                return;\r\n            }\r\n\r\n            availablePieces[next.piece.player]++;\r\n\r\n            next.piece.isAlive = false;\r\n            next.piece.cell = null;\r\n            next.piece = null;\r\n        }\r\n\r\n        // If piece from same player, block move\r\n        if(next.piece) {\r\n            console.warn(\"Targeted cell already has piece: \", next.piece, next);\r\n            return;\r\n        }\r\n\r\n        // Move piece to target cell\r\n        piece.cell.piece = null;\r\n        next.piece = piece;\r\n        piece.cell = next;\r\n\r\n        $scope.previewArrows = [];\r\n        $scope.previewedPiece = null;\r\n    };\r\n\r\n\tfunction createBoard() {\r\n\r\n\t\tvar board = Object.assign({}, BOARD);\r\n\r\n\t\tfor (var row in board) {\r\n\t\t\tif(!board.hasOwnProperty(row)) continue;\r\n\r\n\t\t\tfor (var col in board[row]) {\r\n\t\t\t\tif(!board[row].hasOwnProperty(col)) continue;\r\n\r\n\t\t\t\tboard[row][col].row = row;\r\n\t\t\t\tboard[row][col].col = col;\r\n\t\t\t\tboard[row][col].piece = null;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn board;\r\n\t}\r\n\r\n\tfunction getCell(board, row, col) {\r\n\t\treturn board[parseInt(row)][parseInt(col)];\r\n\t}\r\n\r\n\tfunction findStartCell(board, player) {\r\n\t\tfor (var row in board) {\r\n\t\t\tif(!board.hasOwnProperty(row)) continue;\r\n\r\n\t\t\tfor (var col in board[row]) {\r\n\t\t\t\tif(!board[row].hasOwnProperty(col)) continue;\r\n\r\n\t\t\t\tvar cell = getCell(board, row, col);\r\n\r\n\t\t\t\tif(!cell.start) continue;\r\n\t\t\t\tif(cell.start !== player) continue;\r\n\r\n\t\t\t\treturn cell;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\tfunction getPieceX(piece) {\r\n\t\tif(!piece.cell) return 0;\r\n\t\treturn (piece.cell.col * CELL_SIZE) + PIECE_CELL_MARGIN;\r\n\t}\r\n\r\n\tfunction getPieceY(piece) {\r\n\t\tif(!piece.cell) return 0;\r\n\t\treturn (piece.cell.row * CELL_SIZE) + PIECE_CELL_MARGIN;\r\n\t}\r\n\r\n\tfunction getNextCell(board, cell, player) {\r\n\r\n\t\tif(cell.end === player) return 'end';\r\n\r\n\t\tif(!cell.next) return null;\r\n\r\n\t\tvar coords = cell.split ?\r\n\t\t\tcell.next[player] :\r\n\t\t\tcell.next;\r\n\r\n\t\tif(!coords) return null;\r\n\r\n\t\treturn getCell(board, coords[0], coords[1]);\r\n\t}\r\n\r\n    // Always leave this at the end of the controller\r\n    $scope.startGame();\r\n\r\n}","angular.module(\"Game\")\r\n\t.controller('MatchmakingCtrl', MatchmakingCtrl);\r\n\r\nfunction MatchmakingCtrl($scope) {\r\n\r\n\tconsole.log(\"@ Matchmaking Controller\");\r\n\r\n\t$scope.nickname = 'Guest_' + parseInt((Math.random()) * 1000);\r\n\t$scope.join = {\r\n\t\troom_id: ''\r\n\t};\r\n\r\n\t$scope.tryCreateRoom = function() {\r\n\r\n\t};\r\n\r\n\t$scope.tryJoinRoom = function() {\r\n\r\n\t};\r\n\r\n}","angular.module('Game')\r\n\t.service('Server', function Server($http, $rootScope) {\r\n\r\n\t\tvar ws = null;\r\n\t\tvar flags = {\r\n\t\t\tisConnected: false,\r\n\t\t\tisInRoom: false,\r\n\t\t\tisCurrentTurn: false,\r\n\t\t};\r\n\r\n\t\tvar data = {\r\n\t\t\troom: null,\r\n\t\t\tself: null,\r\n\t\t\topponent: null\r\n\t\t};\r\n\r\n\t\tfunction connect() {\r\n\t\t\treset();\r\n\r\n\t\t\tws = new WebSocket('ws://127.0.0.1:8080');\r\n\t\t\tws.addEventListener('open', onSocketOpen);\r\n\t\t\tws.addEventListener('message', onSocketMessage);\r\n\t\t\tws.addEventListener('close', onSocketClose);\r\n\t\t}\r\n\r\n\t\tfunction reset() {\r\n\t\t\tflags.isConnected = false;\r\n\t\t\tflags.isInRoom = false;\r\n\t\t\tflags.isCurrentTurn = false;\r\n\r\n\t\t\tdata.room = null;\r\n\t\t\tdata.self = null;\r\n\t\t\tdata.opponent = null;\r\n\r\n\t\t\tif(!ws) return;\r\n\r\n\t\t\tws.close();\r\n\t\t\tws = null;\r\n\t\t}\r\n\r\n\t\tfunction onSocketOpen(event) {\r\n\t\t\tflags.isConnected = true;\r\n\t\t\temit('connected', event);\r\n\t\t}\r\n\r\n\t\tfunction onSocketMessage(event) {\r\n\r\n\t\t\tvar payload = JSON.parse(event.data);\r\n\r\n\t\t\tconsole.log(\"[ >> ] \", payload);\r\n\r\n\t\t\tswitch(payload.cmd) {\r\n\t\t\t\tcase \"room_data\": return setupRoomData(payload);\r\n\t\t\t\tcase \"self_data\": return setupSelfData(payload);\r\n\t\t\t\tcase \"opponent_data\": return setupOpponentData(payload);\r\n\t\t\t}\r\n\r\n\t\t\temit(payload.cmd, payload);\r\n\r\n\t\t}\r\n\r\n\t\tfunction onSocketClose(event) {\r\n\t\t\temit('disconnected', event);\r\n\t\t}\r\n\r\n\t\tfunction emit(event, parameters) {\r\n\t\t\t$rootScope.$broadcast('Server::' + event, parameters);\r\n\t\t}\r\n\r\n\t\tfunction on(event, callback) {\r\n\t\t\t$rootScope.$on('Server::' + event, callback);\r\n\t\t}\r\n\r\n\t\tfunction send(command, payload) {\r\n\t\t\tif(!payload) payload = {};\r\n\r\n\t\t\tpayload.cmd = command;\r\n\t\t\tconsole.log(\"[ << ] \", payload);\r\n\r\n\t\t\tvar serialized = JSON.stringify(payload);\r\n\r\n\t\t\tws.send(serialized);\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tisConnected: function() { return flags.isConnected; },\r\n\t\t\tisInRoom: function() { return flags.isInRoom; },\r\n\t\t\tisCurrentTurn: function() { return flags.isCurrentTurn; },\r\n\t\t\tgetRoom: function() { return data.room; },\r\n\t\t\tgetSelf: function() { return data.self; },\r\n\t\t\tgetOpponent: function() { return data.opponent; },\r\n\t\t\tsend: send,\r\n\t\t\ton: on,\r\n\t\t}\r\n\r\n\t});"]}